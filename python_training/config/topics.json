[
    {
        "name": "Arithmetic",
        "description": "Understanding and performing basic arithmetic operations like addition, subtraction, multiplication, and division. Learn how to work with integers and floats, and understand the order of operations in Python.",
        "topics": [
            "Addition, Subtraction, Multiplication, Division",
            "Order of Operations",
            "Integer and Float Operations"
        ],
        "contents": {
            "resources": [
                "Object Oriented Programming",
                "Mutability vs Immutability",
                "Polymorphism"
            ]
        }
    },
    {
        "name": "Classes",
        "description": "Attaching behavior to data by defining classes. Learn how to create objects, define methods and attributes, and implement inheritance and polymorphism.",
        "topics": [
            "Defining Classes",
            "Creating Objects",
            "Methods and Attributes",
            "Inheritance and Polymorphism"
        ],
        "contents": {
            "resources": [
                "Object Oriented Programming",
                "Mutability vs Immutability",
                "Polymorphism"
            ]
        }
    },
    {
        "name": "Comprehensions",
        "description": "Readable iteration patterns for creating lists, dictionaries, and sets. Comprehensions offer a concise way to construct these data structures with less code.",
        "topics": [
            "List Comprehensions",
            "Dictionary Comprehensions",
            "Set Comprehensions",
            "Nested Comprehensions"
        ],
        "contents": {
            "resources": [
                "Object Oriented Programming",
                "Mutability vs Immutability",
                "Polymorphism"
            ]
        }
    },
    {
        "name": "Conditional Expressions",
        "description": "Patterns to control the flow of your program using if, else, and elif statements. Conditional expressions help manage decision-making in your code.",
        "topics": [
            "If Statements",
            "Else and Elif",
            "Ternary Operators",
            "Nested Conditionals"
        ],
        "contents": {
            "resources": [
                "Object Oriented Programming",
                "Mutability vs Immutability",
                "Polymorphism"
            ]
        }
    },
    {
        "name": "Data Structures",
        "description": "Organizing and storing data efficiently using lists, tuples, dictionaries, and sets. Learn about the collections module for specialized data structures.",
        "topics": [
            "Lists",
            "Tuples",
            "Dictionaries",
            "Sets",
            "collections Module"
        ],
        "contents": {
            "resources": [
                "Object Oriented Programming",
                "Mutability vs Immutability",
                "Polymorphism"
            ]
        }
    },
    {
        "name": "Data Types",
        "description": "Understanding different data types and their uses in Python. Learn about integers, floats, strings, and booleans, and how to perform type conversion.",
        "topics": [
            "Integers",
            "Floats",
            "Strings",
            "Booleans",
            "Type Conversion"
        ],
        "contents": {
            "resources": [
                "Object Oriented Programming",
                "Mutability vs Immutability",
                "Polymorphism"
            ]
        }
    },
    {
        "name": "Debugging",
        "description": "Reading and writing exceptions to handle errors effectively. Learn about try-except blocks, raising exceptions, logging errors, and using debugging tools.",
        "topics": [
            "Try-Except Blocks",
            "Raising Exceptions",
            "Logging Errors",
            "Debugging Tools"
        ],
        "contents": {
            "resources": [
                "Handling Exceptions",
                "Failing Early",
                "Tests: unittest, pytest"
            ]
        }
    },
    {
        "name": "Decision Trees",
        "description": "Building and using decision trees for data analysis and machine learning. Understand tree structure, splitting criteria, pruning, and their applications.",
        "topics": [
            "Tree Structure",
            "Splitting Criteria",
            "Pruning",
            "Applications in Machine Learning"
        ],
        "contents": {
            "resources": [
                "Handling Exceptions",
                "Failing Early",
                "Tests: unittest, pytest"
            ]
        }
    },
    {
        "name": "Functional Programming",
        "description": "An alternative programming paradigm focusing on functions and immutability. Learn about pure functions, higher-order functions, lambda expressions, and immutable data.",
        "topics": [
            "Pure Functions",
            "Higher-Order Functions",
            "Immutable Data",
            "Lambda Expressions"
        ],
        "contents": {
            "resources": [
                "functools",
                "itertools",
                "Vectorization",
                "4"
            ]
        }
    },
    {
        "name": "Functions",
        "description": "Defining and using functions to organize code and perform tasks. Understand function definitions, arguments and parameters, return values, and scope.",
        "topics": [
            "Function Definitions",
            "Arguments and Parameters",
            "Return Values",
            "Scope and Closure"
        ],
        "contents": {
            "resources": [
                "Organizing Code",
                "Parameters",
                "Environment, Scope, and Closure"
            ]
        }
    },
    {
        "name": "Generator Expressions",
        "description": "Writing code 'promises' that are evaluated lazily, which improves memory efficiency. Learn about generators vs iterators, the yield statement, and lazy evaluation.",
        "topics": [
            "Generators vs Iterators",
            "Yield Statement",
            "Lazy Evaluation",
            "Memory Efficiency"
        ],
        "contents": {
            "resources": [
                "Lazy Evaluation",
                "Static Code Analysis",
                "Generator vs Iterator"
            ]
        }
    },
    {
        "name": "Iteration",
        "description": "Operating on a collection of elements using loops and comprehension statements. Understand the different ways to iterate over data structures in Python.",
        "topics": [
            "For Loops",
            "While Loops",
            "Comprehension Statements",
            "collections Module"
        ],
        "contents": {
            "resources": [
                "Looping in Python",
                "Comprehension Statements",
                "collections"
            ]
        }
    },
    {
        "name": "Introduction",
        "description": "Getting started with Python basics, including variables, data types, control flow, and basic input/output. This foundational knowledge is essential for all Python programming.",
        "topics": [
            "Variables",
            "Data Types",
            "Control Flow",
            "Basic I/O"
        ],
        "contents": {
            "resources": [
                "Object Oriented Programming",
                "Mutability vs Immutability",
                "Polymorphism"
            ]
        }
    },
    {
        "name": "Loops",
        "description": "Understanding and using loops to repeat actions and process collections of data. Learn about for loops, while loops, nested loops, and loop control statements.",
        "topics": [
            "For Loops",
            "While Loops",
            "Nested Loops",
            "Loop Control (break, continue)"
        ],
        "contents": {
            "resources": [
                "Object Oriented Programming",
                "Mutability vs Immutability",
                "Polymorphism"
            ]
        }
    },
    {
        "name": "Strings",
        "description": "Manipulating and processing text data using various string operations and methods. Learn about formatting strings and using regular expressions for pattern matching.",
        "topics": [
            "String Operations",
            "String Methods",
            "Formatting Strings",
            "Regular Expressions"
        ],
        "contents": {
            "resources": [
                "Object Oriented Programming",
                "Mutability vs Immutability",
                "Polymorphism"
            ]
        }
    },
    {
        "name": "Type Hinting",
        "description": "Incorporating types in code for better readability and error checking. Understand static typing, type annotations, type checking, and static code analysis in Python.",
        "topics": [
            "Static Typing",
            "Type Annotations",
            "Type Checking",
            "Static Code Analysis"
        ],
        "contents": {
            "resources": [
                "Static Typing",
                "Static Code Analysis"
            ]
        }
    }
]
